from Crypto.Cipher import AES
import binascii
import hashlib
import codecs


class EncDeData:
    @staticmethod
    def pad(data):
        length = 16 - (len(data) % 16)
        data += chr(length) * length
        return data

    @staticmethod
    def encrypt(plaintext, workingkey):
        '''
        Function for Encrypting The data
        '''
        iv = '\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f'
        plaintext = EncDecData.pad(plaintext)
        encdigest = hashlib.md5()
        encdigest.update(str(workingkey).encode('utf-8'))
        enc_cipher = AES.new(encdigest.digest(), AES.MODE_CBC, iv.encode('utf-8'))
        encryptedtext = binascii.hexlify(enc_cipher.encrypt(plaintext.encode('utf-8'))).decode("utf-8")
        return encryptedtext

    @staticmethod
    def decrypt(ciphertext, workingkey):
        '''
            Function  for Decrypting The data
            '''
        iv = '\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f'
        decdigest = hashlib.md5()
        decdigest.update(str(workingkey).encode('utf-8'))
        encryptedtext = codecs.decode(ciphertext, "hex")
        dec_cipher = AES.new(decdigest.digest(), AES.MODE_CBC, iv.encode('utf-8'))
        decryptedtext = str(dec_cipher.decrypt(encryptedtext), 'utf-8')
        return decryptedtext
